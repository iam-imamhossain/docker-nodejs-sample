pipeline {
    agent {
        docker {
            image 'node:14'  // Using Node.js Docker image for the build
            args '-v /tmp/.npm'  // Optional: persist npm cache to speed up builds
        }
    }
    environment {
        SONAR_TOKEN = credentials('sonar_id')  // Store SonarQube token securely in Jenkins credentials
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code'
                git branch: 'main', url: 'https://github.com/iam-imamhossain/docker-nodejs-sample.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'yarn install --production'  // Install Node.js dependencies
            }
        }
        stage('Run Tests') {
            steps {
                sh 'npm test'  // Run your test scripts (if any)
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {  // Use SonarQube environment defined earlier
                    sh 'npm run sonar'  // Run SonarQube analysis
                }
            }
        }
        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true  // Wait for SonarQube quality gate status
            }
        }
        stage('Build and Deploy') {
            steps {
                sh 'npm run build'  // Build the application (adjust based on your package.json)
            }
        }
    }
    post {
        always {
            cleanWs()  // Clean workspace after build
        }
    }
}

pipeline {
    agent {
        docker {
            image 'node:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'  // Mount Docker socket
        }
    }
    environment {
        DOCKER_IMAGE = 'imam2000/node-sample:${DOCKER_TAG}' // Docker image name
        DOCKER_TAG = 'latest' // Docker image tag
        DOCKER_TOKEN_CREDENTIALS_ID = 'docker_id'
        DOCKER_USERNAME = 'imam2000'
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Checking out source code"
                git branch: 'main', url: 'https://github.com/iam-imamhossain/docker-nodejs-sample.git'
            }
        }
        //  stage('Build and Test') {
        //     steps {
        //         echo 'Building and testing code'
        //         sh 'yarn install'  // Install both production and development dependencies
        //         // Install ESLint and run it for static analysis
        //         sh '''
        //         npm install eslint --save-dev
        //         npx eslint . --max-warnings 0
        //         npm fund 
        //         npm audit fix
        //         npm audit
        //         '''
        //     }
        // }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image'
                sh 'docker build -t ${DOCKER_IMAGE} .' // Run docker build in the current workspace
            }
        }
        stage('Build Complete') {
            steps {
                echo "Build complete"
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Login using token
                    withCredentials([string(credentialsId: "$DOCKER_TOKEN_CREDENTIALS_ID", variable: 'DOCKER_TOKEN')]) {
                        sh "echo $DOCKER_TOKEN | docker login --username $DOCKER_USERNAME --password-stdin"
                        sh 'docker push $DOCKER_IMAGE'
                    }
                }
            }
        }
    } 
    post {
        always {
            echo "Cleaning up..."
            cleanWs() // Clean workspace
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
